from signal import Signals
from types import FrameType
from typing import Any, Dict, List, Tuple

from _typeshed import Incomplete

from gunicorn import SERVER_SOFTWARE as SERVER_SOFTWARE
from gunicorn import __version__ as __version__
from gunicorn import sock as sock
from gunicorn import systemd as systemd
from gunicorn import util as util
from gunicorn.app.base import BaseApplication
from gunicorn.errors import AppImportError as AppImportError
from gunicorn.errors import HaltServer as HaltServer
from gunicorn.pidfile import Pidfile as Pidfile
from gunicorn.sock import BaseSocket as BaseSocket
from gunicorn.workers.base import Worker as Worker

class Arbiter:
    WORKER_BOOT_ERROR: int
    APP_LOAD_ERROR: int
    START_CTX: dict[Any, Any]
    LISTENERS: list[Any]
    WORKERS: dict[int, Worker]
    PIPE: list[tuple[BaseSocket, BaseSocket]]
    SIG_QUEUE: list[Any]
    SIGNALS: Incomplete
    SIG_NAMES: Incomplete
    log: Incomplete
    pidfile: Incomplete
    systemd: bool
    worker_age: int
    reexec_pid: int
    master_pid: int
    master_name: str
    def __init__(self, app: BaseApplication) -> None: ...
    num_workers: Incomplete
    app: BaseApplication
    cfg: Incomplete
    worker_class: Incomplete
    address: Incomplete
    timeout: Incomplete
    proc_name: Incomplete
    def setup(self, app: BaseApplication) -> None: ...
    pid: int
    def start(self) -> None: ...
    def init_signals(self) -> None: ...
    def signal(self, sig: Signals, frame: FrameType | None) -> None: ...
    def run(self) -> None: ...
    def handle_chld(self, sig: Signals, frame: FrameType | None) -> None: ...
    def handle_hup(self) -> None: ...
    def handle_term(self) -> None: ...
    def handle_int(self) -> None: ...
    def handle_quit(self) -> None: ...
    def handle_ttin(self) -> None: ...
    def handle_ttou(self) -> None: ...
    def handle_usr1(self) -> None: ...
    def handle_usr2(self) -> None: ...
    def handle_winch(self) -> None: ...
    def maybe_promote_master(self) -> None: ...
    def wakeup(self) -> None: ...
    def halt(self, reason: Incomplete | None = ..., exit_status: int = ...) -> None: ...
    def sleep(self) -> None: ...
    def stop(self, graceful: bool = ...) -> None: ...
    def reexec(self) -> None: ...
    def reload(self) -> None: ...
    def murder_workers(self) -> None: ...
    def reap_workers(self) -> None: ...
    def manage_workers(self) -> None: ...
    def spawn_worker(self) -> None: ...
    def spawn_workers(self) -> None: ...
    def kill_workers(self, sig: Signals) -> None: ...
    def kill_worker(self, pid: int, sig: Signals) -> None: ...
