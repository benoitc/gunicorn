import socket
from collections.abc import Callable
from ssl import SSLContext, SSLSocket
from typing import Any

from _typeshed import Incomplete

from gunicorn import util as util
from gunicorn.config import Config as Config
from gunicorn.glogging import Logger as Logger

class BaseSocket:
    log: Incomplete
    conf: Incomplete
    cfg_addr: Incomplete
    sock: Incomplete
    def __init__(
        self, address: tuple[str, int], conf: Config, log: Logger, fd: None = ...
    ) -> None: ...
    def __getattr__(self, name: str) -> Incomplete: ...
    def set_options(self, sock: socket.socket, bound: bool = ...) -> socket.socket: ...
    def bind(self, sock: socket.socket) -> None: ...
    def close(self) -> None: ...

class TCPSocket(BaseSocket):
    FAMILY: Incomplete
    def set_options(self, sock: socket.socket, bound: bool = ...) -> socket.socket: ...

class TCP6Socket(TCPSocket):
    FAMILY: Incomplete

class UnixSocket(BaseSocket):
    FAMILY: Incomplete
    def __init__(
        self, addr: str, conf: Config, log: Logger, fd: list[int] | None = ...
    ) -> None: ...
    def bind(self, sock: socket.socket) -> None: ...

def create_sockets(conf: Config, log: Logger, fds: None = ...) -> list[TCPSocket]: ...
def close_sockets(listeners: list[TCPSocket | Any], unlink: bool = ...) -> None: ...
def ssl_context(conf: Config) -> SSLContext: ...
def ssl_wrap_socket(sock: socket.socket, conf: Config) -> SSLSocket: ...
