from collections.abc import Generator, Iterator
from io import BytesIO

from _typeshed import Incomplete
from typing_extensions import Protocol, Self

from gunicorn.http.errors import ChunkMissingTerminator, InvalidChunkSize, NoMoreData
from gunicorn.http.message import Message
from gunicorn.http.unreader import Unreader

class _Read(Protocol):
    def read(self, size: int) -> bytes: ...

class ChunkedReader:
    req: Message
    parser: Incomplete
    buf: BytesIO
    def __init__(self, req: Message, unreader: Unreader) -> None: ...
    def read(self, size: int) -> bytes: ...
    def parse_trailers(self, unreader: Unreader, data: bytes) -> bytes: ...
    def parse_chunked(self, unreader: Unreader) -> Generator[bytes, None, None]: ...
    def parse_chunk_size(
        self, unreader: Unreader, data: bytes | None = ...
    ) -> tuple[int, bytes]: ...
    def get_data(self, unreader: Unreader, buf: BytesIO) -> None: ...

class LengthReader:
    unreader: Unreader
    length: int
    def __init__(self, unreader: Unreader, length: int) -> None: ...
    def read(self, size: int) -> bytes: ...

class EOFReader:
    unreader: Unreader
    buf: BytesIO
    finished: bool
    def __init__(self, unreader: Unreader) -> None: ...
    def read(self, size: int) -> bytes: ...

class Body:
    reader: _Read
    buf: BytesIO
    def __init__(self, reader: _Read) -> None: ...
    def __iter__(self) -> Self: ...
    def __next__(self) -> Iterator[bytes]: ...
    next = __next__
    def getsize(self, size: int) -> int: ...
    def read(self, size: int | None = ...) -> bytes: ...
    def readline(self, size: int | None = ...) -> bytes: ...
    def readlines(self, size: int | None = ...) -> list[bytes]: ...
